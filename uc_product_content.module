<?php
// $Id$

/**
 * @file
 * CCK Field to integrate products to nodes
 *
 * Allow products to be associated with a content type and acced to cart on node creation
 */

function uc_product_content_install() {
  drupal_load('module', 'content');
  content_notify('install', 'uc_product_content');
}

function uc_product_content_uninstall() {
  drupal_load('module', 'content');
  content_notify('uninstall', 'uc_product_content');
}

function uc_product_content_enable() {
  drupal_load('module', 'content');
  content_notify('enable', 'uc_product_content');
}

function uc_product_content_disable() {
  drupal_load('module', 'content');
  content_notify('disable', 'uc_product_content');
}


/**
 * Implementation of hook_field_info().
 */
function uc_product_content_field_info() {
  return array(
    'uc_product_content' => array(
      'label' => t('Product'),
      'description' => t('Create product references that can be purchased at node creation.'),
    ),
  );
}


/**
 * Implementation of hook_field_settings().
 */
function uc_product_content_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array(
        'product' => array('type' => 'text', 'not null' => FALSE),
      );
      return $columns;
    case 'save':
      return array('product_options');
  }
}


/**
 * Implementation of hook_field().
 */
function uc_product_content_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'presave':
      foreach ($items as $nid) {
        if($nid != 'none' && $nid != 0) {
          // add product to cart
          // should check if already in cart
          // should remove items not chosen if editing
          uc_cart_add_item($nid, 1, NULL, NULL, FALSE);
        }
      }
      break;
  }
  //dsm(array('$op' => $op, '$node' => $node, '$items' => $items));
}

/**
 * Implementation of hook_content_is_empty().
 */
function uc_product_content_content_is_empty($item, $field) {
  if (empty($item['product_options']) && (string)$item['product_options'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function uc_product_content_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('uc_product_content'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' product field formatter.
 */
function theme_uc_product_content_formatter_default($element) {
  return '<p>' . print_r($element, TRUE) . '</p>';
}


/**
* Implementation of hook_theme().
*/
function uc_product_content_theme() {
  return array(
    'uc_product_content_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function uc_product_content_elements() {
  return array(
    'uc_product_content_radios' => array(
      '#input' => TRUE,
      '#columns' => array('product'), '#delta' => 0,
      '#process' => array('uc_product_content_radios_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function uc_product_content_radios_process($element, $edit, $form_state, $form) {
  dsm(array('$element' => $element, '$edit' => $edit, '$form_state' => $form_state, '$form' => $form));
}


/**
 * Implementation of hook_default_value()
 */
function uc_product_content_default_value(&$form, &$form_state, $field, $delta) {
  return '';
}


/**
 * Implementation of hook_widget_info().
 */
function uc_product_content_widget_info() {
  return array(
    'uc_product_content_radios' => array(
      'label' => t('Radio Buttons/Checkboxes'),
      'field types' => array('uc_product_content'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function uc_product_content_widget_settings($op, $widget) {
  // do some cleanup on the strange return values form the checkboxes
  if(isset($widget['product_options'])) {
    $widget['product_options'] = array_keys(array_filter($widget['product_options']));
  }
  
  switch ($op) {
    case 'form':
      $products = array();
  
      $data = db_query("SELECT n.nid, n.title FROM {uc_products} AS p INNER JOIN {node} AS n ON p.nid = n.nid ORDER BY n.title ASC");
      while ($obj = db_fetch_object($data)) {
        $products[$obj->nid] = $obj->title;
      }
      $products['none'] = 'None';

      $form['product_options'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Product Options'),
        '#default_value' => isset($widget['product_options']) ? $widget['product_options'] : array(),
        '#options' => $products,
        '#required' => TRUE,
        '#description' => t('The group of products that may be selected.'),
      );
      // $form['array_filter'] = array('#type' => 'hidden'); // Doesn't seem to work
      
      return $form;
      break;
      
    case 'validate':
      
      break;
      
    case 'save':
      return array('product_options');
  }
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function uc_product_content_widget(&$form, &$form_state, $field, $items, $delta = 0) {  
  $options = array();
  if (isset($field['widget']['product_options'])) {
    // do some cleanup on the strange return values from the checkboxes
    $field['widget']['product_options'] = array_keys(array_filter($field['widget']['product_options']));
    
    if ( ($pos = array_search('none', $field['widget']['product_options'])) !== FALSE) {
      $options['none'] = t('None');
      unset($field['widget']['product_options'][$pos]);
    }
    $nids = implode(', ', $field['widget']['product_options']);
    $data = db_query("SELECT nid, title FROM {node} WHERE nid IN (%s) ORDER BY title ASC", $nids);
    while ($obj = db_fetch_object($data)) {
      $options[$obj->nid] = $obj->title;
    }
  }
    
  $element = array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => isset($items[$delta]) ? array_pop($items[$delta]) : '',
  );
  
  return $element;
}

